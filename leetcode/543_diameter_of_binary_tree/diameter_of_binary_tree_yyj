# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        if not root: return 0

        left_path = 0
        right_path = 0
        path_list = []
        max_path, path_list = self.postOrder(root, left_path, right_path, path_list)

        return max(path_list)

    def postOrder(self, node, left_path, right_path, path_list):
        left_max_path = 0
        right_max_path = 0
        if node.left:
            left_max_path, path_list = self.postOrder(node.left, left_path, right_path, path_list)
        if node.right:
            right_max_path, path_list = self.postOrder(node.right, left_path, right_path, path_list)

        path_list.append(left_max_path + right_max_path)

        return max(left_max_path, right_max_path) + 1, path_list